name: Deploy Production
on:
  push:
    tags:
      - release/**

permissions:
  id-token: write
  contents: read
env:
  ECR_REPOSITORY: "cdk-hnb659fds-container-assets-240542634635-ap-southeast-1"
  ECS_SERVICE: "popbela-production-WwwStack-WwwWwwEcsServiceF1492D52-P8HfWRBpiSEP"
  ECS_CLUSTER: "popbela-production-StatefulStackEcsClusterStack0D7CDC05-EcsClusterFB9B21B5-Xs5gf8m7CE2z"
  ECS_TASK_DEFINITION_FILE: "task-definition.json"
  ECS_TASK_DEFINITION_NAME: "popbelaproductionWwwStack"
  CONTAINER_NAME: "www"

jobs:
  # JOB to run change detection
  changes:
    runs-on:
      - self-hosted
      - codebuild-x64
    environment: production
    # Set job outputs to values from filter step
    outputs:
      cdk: ${{ steps.filter.outputs.cdk }}
    steps:
    -
      name: Checkout
      uses: actions/checkout@v3
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          cdk:
            - '.cdk/**'
  deployCdk :
    needs: changes
    name: Deploy CDK Production
    environment: production
    # if: ${{ needs.changes.outputs.cdk == 'true' }}
    runs-on:
      - self-hosted
      - codebuild-x64
    steps:
    -
      name: Checkout
      uses: actions/checkout@v3
    -
      uses: actions/setup-node@v3
      with:
        node-version: 18
    -
      name: Authenticate Via OIDC Role
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ap-southeast-1
        role-duration-seconds: 1800
        role-skip-session-tagging: true
        role-to-assume: arn:aws:iam::616010153635:role/GitHubActionRole
    -
      name: Assume CDK Deploy Role
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ap-southeast-1
        role-duration-seconds: 1800
        role-skip-session-tagging: true
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
        role-to-assume: arn:aws:iam::240542634635:role/cdk-hnb659fds-deploy-role-240542634635-ap-southeast-1
        role-external-id: Pipeline
    -
      name: Deploy with CDK
      run: |-
        cd .cdk
        npm ci
        npm run build
        npm run cdk synth
        npm run cdk deploy popbela-Www/Pipeline/popbela-production/* --require-approval never


  # updateEcs:
  #   needs: changes
  #   name: Update Task Definition ECS
  #   runs-on:
  #     - self-hosted
  #     - codebuild-x64
  #   environment: production
  #   timeout-minutes: 15
  #   if: ${{ needs.changes.outputs.cdk == 'false' }}
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v3
  #     -
  #       name: Authenticate Via OIDC Role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-region: ap-southeast-1
  #         role-duration-seconds: 1800
  #         role-skip-session-tagging: true
  #         role-to-assume: arn:aws:iam::616010153635:role/GitHubActionRole
  #     -
  #       name: Assume CDK Deploy Role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-region: ap-southeast-1
  #         role-duration-seconds: 1800
  #         role-skip-session-tagging: true
  #         aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
  #         role-to-assume: arn:aws:iam::240542634635:role/cdk-hnb659fds-deploy-role-240542634635-ap-southeast-1
  #         role-external-id: Pipeline
  #     -
  #       name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     -
  #       name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         # Build a docker container and
  #         # push it to ECR so that it can
  #         # be deployed to ECS.
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  #     -
  #       name: Download task definition
  #       run: |
  #         aws ecs list-task-definitions --query taskDefinitionArns --output text | sed 's/\t/\n/g' | grep "${ECS_TASK_DEFINITION_NAME}" | tail -1 | xargs -I {} aws ecs describe-task-definition --task-definition {} --query taskDefinition > task-definition.json

  #     -
  #       name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ${{ env.ECS_TASK_DEFINITION_FILE }}
  #         container-name: ${{ env.CONTAINER_NAME }}
  #         image: ${{ steps.build-image.outputs.image }}

  #     -
  #       name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         service: ${{ env.ECS_SERVICE }}
  #         cluster: ${{ env.ECS_CLUSTER }}
  #         wait-for-service-stability: true
